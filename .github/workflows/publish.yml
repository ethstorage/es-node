# This workflow will publish an es-node release with a pre-build executable and docker image

name: Publish
run-name: ${{ github.actor }} is publishing a release ðŸš€
on:
  push:
    tags: 
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_DIR: es-node.${{ github.ref_name }}
      BIN_DIR: es-node.${{ github.ref_name }}/build/bin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Create package
        run: |
          mkdir -p ${{ env.BIN_DIR }}/snarkbuild
          cp -r ethstorage/prover/snarkjs ${{ env.BIN_DIR }}
          cp run.sh ${{ env.BUILD_DIR }}

      - name: Build
        run: |
          make build TARGETOS=linux TARGETARCH=amd64
          mv build/bin/es-node ${{ env.BIN_DIR }}/
          tar -czvf es-node.${{ github.ref_name }}.linux-amd64.tar.gz ${{ env.BUILD_DIR }}
          make clean
          make build TARGETOS=darwin TARGETARCH=amd64
          mv build/bin/es-node ${{ env.BIN_DIR }}/
          tar -czvf es-node.${{ github.ref_name }}.darwin-amd64.tar.gz ${{ env.BUILD_DIR }}
          make clean
          make build TARGETOS=darwin TARGETARCH=arm64
          mv build/bin/es-node ${{ env.BIN_DIR }}/
          tar -czvf es-node.${{ github.ref_name }}.darwin-arm64.tar.gz ${{ env.BUILD_DIR }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          files: |
            es-node.${{ github.ref_name }}.linux-amd64.tar.gz
            es-node.${{ github.ref_name }}.darwin-amd64.tar.gz
            es-node.${{ github.ref_name }}.darwin-arm64.tar.gz
          generate_release_notes: true

  build-and-push-image:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. 
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. 
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. 
      # If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. 
      # For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
