# This workflow will publish an es-node release with a pre-build executable and docker image

name: Publish
run-name: ${{ github.actor }} is publishing a release ðŸš€
on:
  push:
    tags: 
      - 'v*'

# Always wait for previous release to finish before releasing again
concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        exclude: 
          - os: ubuntu-latest
            arch: arm64
    env:
      BUILD_DIR: es-node.${{ github.ref_name }}
      BIN_DIR: es-node.${{ github.ref_name }}/build/bin
      FILE_NAME: es-node.${{ github.ref_name }}.${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }}-${{ matrix.arch }}.tar.gz
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up build environment
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install build-essential
          sudo apt install libomp-dev

      - name: Create package
        run: |
          mkdir -p ${{ env.BIN_DIR }}/snarkbuild
          mkdir -p ${{ env.BIN_DIR }}/snark_lib/zkey
          cp -r ethstorage/prover/snark_lib ${{ env.BIN_DIR }}
          cp *.sh ${{ env.BUILD_DIR }}

      - name: Build
        run: |
          make build TARGETOS=${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }} TARGETARCH=${{ matrix.arch }}
          mv build/bin/es-node ${{ env.BIN_DIR }}/
          tar -czvf ${{ env.FILE_NAME }} ${{ env.BUILD_DIR }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}
          path: ${{ env.FILE_NAME }}

  release:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Download artifacts
          uses: actions/download-artifact@v4

        - name: Create Release
          uses: softprops/action-gh-release@v2
          with:
            tag_name: ${{ github.ref }}
            name: Release ${{ github.ref_name }}
            files: |
              **/*
            fail_on_unmatched_files: true
            generate_release_notes: true

  build-and-push-image:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. 
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. 
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. 
      # If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. 
      # For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
